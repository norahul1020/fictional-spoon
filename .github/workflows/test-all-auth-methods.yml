name: 🔒 Tenable WAS - Complete Authentication Methods Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      auth_methods:
        description: 'Authentication methods to test'
        required: false
        default: 'basic,digest,form,cookie,api_key,bearer'
        type: string
      vulnerability_threshold:
        description: 'Vulnerability threshold'
        required: false
        default: 'Medium'
        type: choice
        options: [Critical, High, Medium, Low]

env:
  TENABLE_ACCESS_KEY: ${{ secrets.TENABLE_ACCESS_KEY }}
  TENABLE_SECRET_KEY: ${{ secrets.TENABLE_SECRET_KEY }}
  VULNERABILITY_THRESHOLD: ${{ github.event.inputs.vulnerability_threshold || 'Medium' }}
  GOREST_API_TOKEN: ${{ secrets.GOREST_API_TOKEN || 'demo-token' }}

jobs:
  test-basic-authentication:
    name: 🔐 Basic Authentication Test
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.auth_methods || 'basic,digest,form,cookie,api_key,bearer', 'basic')
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🧪 Test HTTPBin Basic Auth Endpoint
      run: |
        echo "🔍 Testing HTTPBin Basic Auth endpoint..."
        response=$(curl -s -u testuser:testpass123 https://httpbin.org/basic-auth/testuser/testpass123)
        if echo "$response" | jq -r '.authenticated' | grep -q "true"; then
          echo "✅ HTTPBin Basic Auth endpoint working"
        else
          echo "❌ HTTPBin Basic Auth endpoint failed"
          exit 1
        fi
        
    - name: 🔍 Run Basic Auth Scan
      run: |
        echo "🚀 Running Basic Authentication scan using config/basic-auth.conf..."
        
        # Copy the configuration file
        cp config/basic-auth.conf tenable_was.conf
        
        echo "📋 Using configuration:"
        cat tenable_was.conf
        
        # Run the scan
        docker pull tenable/was-scanner:latest
        docker run \
          --name tenable-basic-auth \
          -v $(pwd):/scanner \
          -e WAS_MODE=cicd \
          -e ACCESS_KEY="${{ env.TENABLE_ACCESS_KEY }}" \
          -e SECRET_KEY="${{ env.TENABLE_SECRET_KEY }}" \
          tenable/was-scanner:latest || true
        
        # Organize results
        mkdir -p results/basic-auth
        [[ -f tenable_was_scan.html ]] && cp tenable_was_scan.html results/basic-auth/
        [[ -f scanner.log ]] && cp scanner.log results/basic-auth/
        [[ -f tenable_was.conf ]] && cp tenable_was.conf results/basic-auth/
        
    - name: 📤 Upload Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: basic-auth-results-${{ github.run_number }}
        path: results/basic-auth/
        retention-days: 7

  test-digest-authentication:
    name: 🔐 Digest Authentication Test
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.auth_methods || 'basic,digest,form,cookie,api_key,bearer', 'digest')
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🧪 Test HTTPBin Digest Auth Endpoint
      run: |
        echo "🔍 Testing HTTPBin Digest Auth endpoint..."
        response=$(curl -s --digest -u testuser:testpass123 https://httpbin.org/digest-auth/auth/testuser/testpass123)
        if echo "$response" | jq -r '.authenticated' | grep -q "true"; then
          echo "✅ HTTPBin Digest Auth endpoint working"
        else
          echo "❌ HTTPBin Digest Auth endpoint failed"
        fi
        
    - name: 🔍 Run Digest Auth Scan
      run: |
        echo "🚀 Running Digest Authentication scan using config/digest-auth.conf..."
        
        # Copy the configuration file
        cp config/digest-auth.conf tenable_was.conf
        
        echo "📋 Using configuration:"
        cat tenable_was.conf
        
        # Run the scan
        docker run \
          --name tenable-digest-auth \
          -v $(pwd):/scanner \
          -e WAS_MODE=cicd \
          -e ACCESS_KEY="${{ env.TENABLE_ACCESS_KEY }}" \
          -e SECRET_KEY="${{ env.TENABLE_SECRET_KEY }}" \
          tenable/was-scanner:latest || true
        
        # Organize results
        mkdir -p results/digest-auth
        [[ -f tenable_was_scan.html ]] && cp tenable_was_scan.html results/digest-auth/
        [[ -f scanner.log ]] && cp scanner.log results/digest-auth/
        [[ -f tenable_was.conf ]] && cp tenable_was.conf results/digest-auth/
        
    - name: 📤 Upload Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: digest-auth-results-${{ github.run_number }}
        path: results/digest-auth/

  test-form-authentication:
    name: 📝 Form Authentication Test
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.auth_methods || 'basic,digest,form,cookie,api_key,bearer', 'form')
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐳 Deploy Test Login App
      run: |
        echo "🚀 Deploying simple login application..."
        
        # Create simple Flask login app
        mkdir -p simple-app/templates
        
        cat > simple-app/app.py << 'APP_EOF'
        from flask import Flask, request, render_template, redirect, session
        
        app = Flask(__name__)
        app.secret_key = 'test-secret-key'
        
        @app.route('/')
        def index():
            if 'logged_in' in session:
                return '<h1>Welcome to Dashboard</h1><p>You are authenticated!</p><a href="/logout">Logout</a>'
            return redirect('/login')
        
        @app.route('/login', methods=['GET', 'POST'])
        def login():
            if request.method == 'POST':
                username = request.form.get('username')
                password = request.form.get('password')
                if username == 'testuser' and password == 'testpass123':
                    session['logged_in'] = True
                    return redirect('/dashboard')
                return 'Login failed - Invalid credentials'
            return '''
            <form method="post">
                <label>Username: <input type="text" name="username"></label><br>
                <label>Password: <input type="password" name="password"></label><br>
                <input type="submit" value="Login">
            </form>
            '''
        
        @app.route('/dashboard')
        def dashboard():
            if 'logged_in' not in session:
                return redirect('/login')
            return '<h1>Dashboard</h1><p>Welcome to the secure area!</p><a href="/logout">Logout</a>'
        
        @app.route('/logout')
        def logout():
            session.pop('logged_in', None)
            return redirect('/login')
        
        if __name__ == '__main__':
            app.run(host='0.0.0.0', port=5000)
        APP_EOF
        
        cat > simple-app/requirements.txt << 'REQ_EOF'
        Flask==2.3.3
        REQ_EOF
        
        cat > simple-app/Dockerfile << 'DOCKER_EOF'
        FROM python:3.9-slim
        WORKDIR /app
        COPY requirements.txt .
        RUN pip install -r requirements.txt
        COPY . .
        EXPOSE 5000
        CMD ["python", "app.py"]
        DOCKER_EOF
        
        # Build and run the app
        cd simple-app
        docker build -t simple-login-app .
        docker run -d --name login-app -p 5000:5000 simple-login-app
        
        # Wait for app to start
        sleep 10
        
        # Test the app
        if curl -s http://localhost:5000/login | grep -q "Username"; then
          echo "✅ Login app deployed successfully"
        else
          echo "❌ Login app deployment failed"
        fi
        
    - name: 🔍 Run Form Auth Scan
      run: |
        echo "🚀 Running Form Authentication scan using config/form-auth.conf..."
        
        # Copy the configuration file
        cp config/form-auth.conf tenable_was.conf
        
        echo "📋 Using configuration:"
        cat tenable_was.conf
        
        # Run the scan
        docker run \
          --name tenable-form-auth \
          -v $(pwd):/scanner \
          --network host \
          -e WAS_MODE=cicd \
          -e ACCESS_KEY="${{ env.TENABLE_ACCESS_KEY }}" \
          -e SECRET_KEY="${{ env.TENABLE_SECRET_KEY }}" \
          tenable/was-scanner:latest || true
        
        # Organize results
        mkdir -p results/form-auth
        [[ -f tenable_was_scan.html ]] && cp tenable_was_scan.html results/form-auth/
        [[ -f scanner.log ]] && cp scanner.log results/form-auth/
        [[ -f tenable_was.conf ]] && cp tenable_was.conf results/form-auth/
        
    - name: 📤 Upload Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: form-auth-results-${{ github.run_number }}
        path: results/form-auth/

  test-cookie-authentication:
    name: 🍪 Cookie Authentication Test
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.auth_methods || 'basic,digest,form,cookie,api_key,bearer', 'cookie')
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🍪 Test Cookie Endpoint
      run: |
        echo "🔍 Testing HTTPBin Cookie endpoint..."
        
        # Set a test cookie
        cookie_jar=$(mktemp)
        curl -s -c "$cookie_jar" https://httpbin.org/cookies/set/test-session/authenticated-user
        
        # Read the cookie back
        response=$(curl -s -b "$cookie_jar" https://httpbin.org/cookies)
        if echo "$response" | grep -q "test-session"; then
          echo "✅ HTTPBin Cookie endpoint working"
        else
          echo "❌ HTTPBin Cookie endpoint failed"
        fi
        
    - name: 🔍 Run Cookie Auth Scan
      run: |
        echo "🚀 Running Cookie Authentication scan using config/cookie-auth.conf..."
        
        # Copy the configuration file
        cp config/cookie-auth.conf tenable_was.conf
        
        echo "📋 Using configuration:"
        cat tenable_was.conf
        
        # Run the scan
        docker run \
          --name tenable-cookie-auth \
          -v $(pwd):/scanner \
          -e WAS_MODE=cicd \
          -e ACCESS_KEY="${{ env.TENABLE_ACCESS_KEY }}" \
          -e SECRET_KEY="${{ env.TENABLE_SECRET_KEY }}" \
          tenable/was-scanner:latest || true
        
        # Organize results
        mkdir -p results/cookie-auth
        [[ -f tenable_was_scan.html ]] && cp tenable_was_scan.html results/cookie-auth/
        [[ -f scanner.log ]] && cp scanner.log results/cookie-auth/
        [[ -f tenable_was.conf ]] && cp tenable_was.conf results/cookie-auth/
        
    - name: 📤 Upload Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cookie-auth-results-${{ github.run_number }}
        path: results/cookie-auth/

  test-api-authentication:
    name: 🔑 API Authentication Test
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.auth_methods || 'basic,digest,form,cookie,api_key,bearer', 'api_key')
    
    steps:
    - name: �� Checkout
      uses: actions/checkout@v4
      
    - name: 🧪 Test Public API Endpoints
      run: |
        echo "🔍 Testing public API endpoints..."
        
        # Test GoRest public endpoint
        response=$(curl -s https://gorest.co.in/public/v2/users)
        if echo "$response" | jq length > /dev/null; then
          echo "✅ GoRest API endpoint working"
        else
          echo "❌ GoRest API endpoint failed"
        fi
        
    - name: 🔍 Run API Auth Scan
      run: |
        echo "🚀 Running API Authentication scan using config/api-key.conf..."
        
        # Copy and process the configuration file
        cp config/api-key.conf tenable_was.conf
        
        # Replace the GOREST_API_TOKEN placeholder
        sed -i "s/\${GOREST_API_TOKEN}/${{ env.GOREST_API_TOKEN }}/g" tenable_was.conf
        
        echo "📋 Using configuration:"
        cat tenable_was.conf
        
        # Run the scan
        docker run \
          --name tenable-api-auth \
          -v $(pwd):/scanner \
          -e WAS_MODE=cicd \
          -e ACCESS_KEY="${{ env.TENABLE_ACCESS_KEY }}" \
          -e SECRET_KEY="${{ env.TENABLE_SECRET_KEY }}" \
          -e GOREST_API_TOKEN="${{ env.GOREST_API_TOKEN }}" \
          tenable/was-scanner:latest || true
        
        # Organize results
        mkdir -p results/api-auth
        [[ -f tenable_was_scan.html ]] && cp tenable_was_scan.html results/api-auth/
        [[ -f scanner.log ]] && cp scanner.log results/api-auth/
        [[ -f tenable_was.conf ]] && cp tenable_was.conf results/api-auth/
        
    - name: 📤 Upload Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-auth-results-${{ github.run_number }}
        path: results/api-auth/

  test-bearer-token-authentication:
    name: 🎫 Bearer Token Test
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.auth_methods || 'basic,digest,form,cookie,api_key,bearer', 'bearer')
    
    steps:
    - name: �� Checkout
      uses: actions/checkout@v4
      
    - name: 🔍 Run Bearer Token Scan
      run: |
        echo "🚀 Running Bearer Token Authentication scan using config/bearer-token.conf..."
        
        # Copy the configuration file
        cp config/bearer-token.conf tenable_was.conf
        
        echo "📋 Using configuration:"
        cat tenable_was.conf
        
        # Run the scan
        docker run \
          --name tenable-bearer-token \
          -v $(pwd):/scanner \
          -e WAS_MODE=cicd \
          -e ACCESS_KEY="${{ env.TENABLE_ACCESS_KEY }}" \
          -e SECRET_KEY="${{ env.TENABLE_SECRET_KEY }}" \
          tenable/was-scanner:latest || true
        
        # Organize results
        mkdir -p results/bearer-token
        [[ -f tenable_was_scan.html ]] && cp tenable_was_scan.html results/bearer-token/
        [[ -f scanner.log ]] && cp scanner.log results/bearer-token/
        [[ -f tenable_was.conf ]] && cp tenable_was.conf results/bearer-token/
        
    - name: 📤 Upload Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bearer-token-results-${{ github.run_number }}
        path: results/bearer-token/

  summary-report:
    name: 📊 Generate Summary Report
    runs-on: ubuntu-latest
    needs: [test-basic-authentication, test-digest-authentication, test-form-authentication, test-api-authentication, test-bearer-token-authentication, test-cookie-authentication]
    if: always()
    
    steps:
    - name: 📥 Download All Results
      uses: actions/download-artifact@v4
      with:
        path: all-results/
        
    - name: 📊 Generate Summary Report
      run: |
        echo "# 🔒 Tenable WAS Authentication Methods Test Summary" > SUMMARY.md
        echo "" >> SUMMARY.md
        echo "**Test Run:** ${{ github.run_number }}" >> SUMMARY.md
        echo "**Date:** $(date -u)" >> SUMMARY.md
        echo "**Repository:** ${{ github.repository }}" >> SUMMARY.md
        echo "**Configuration Files Used:** Separate .conf files from config/ directory" >> SUMMARY.md
        echo "" >> SUMMARY.md
        
        echo "## 📋 Test Results" >> SUMMARY.md
        echo "" >> SUMMARY.md
        
        for auth_type in basic-auth digest-auth form-auth api-auth bearer-token cookie-auth; do
          if [[ -d "all-results/${auth_type}-results-${{ github.run_number }}" ]]; then
            echo "✅ **${auth_type}**: Completed" >> SUMMARY.md
            
            # Check if HTML report exists
            if [[ -f "all-results/${auth_type}-results-${{ github.run_number }}/tenable_was_scan.html" ]]; then
              echo "   - 📄 HTML Report: Available" >> SUMMARY.md
            fi
            
            # Check if scanner log exists
            if [[ -f "all-results/${auth_type}-results-${{ github.run_number }}/scanner.log" ]]; then
              echo "   - 📋 Scanner Log: Available" >> SUMMARY.md
            fi
            
            # Check if config was used
            if [[ -f "all-results/${auth_type}-results-${{ github.run_number }}/tenable_was.conf" ]]; then
              echo "   - ⚙️ Configuration: Available" >> SUMMARY.md
            fi
          else
            echo "❌ **${auth_type}**: Failed or Skipped" >> SUMMARY.md
          fi
          echo "" >> SUMMARY.md
        done
        
        echo "## 📄 Configuration Files" >> SUMMARY.md
        echo "" >> SUMMARY.md
        echo "All authentication methods use separate configuration files:" >> SUMMARY.md
        echo "- \`config/basic-auth.conf\` - Basic Authentication" >> SUMMARY.md
        echo "- \`config/digest-auth.conf\` - Digest Authentication" >> SUMMARY.md
        echo "- \`config/form-auth.conf\` - Form Authentication" >> SUMMARY.md
        echo "- \`config/cookie-auth.conf\` - Cookie Authentication" >> SUMMARY.md
        echo "- \`config/api-key.conf\` - API Key Authentication" >> SUMMARY.md
        echo "- \`config/bearer-token.conf\` - Bearer Token Authentication" >> SUMMARY.md
        echo "- \`config/dvwa-form-auth.conf\` - DVWA Form Authentication" >> SUMMARY.md
        echo "- \`config/minimal-test.conf\` - Minimal Test Configuration" >> SUMMARY.md
        echo "" >> SUMMARY.md
        echo "## 📄 Reports Available" >> SUMMARY.md
        echo "" >> SUMMARY.md
        echo "All scan reports are available in the GitHub Actions artifacts." >> SUMMARY.md
        echo "Download them from the workflow run page." >> SUMMARY.md
        
        cat SUMMARY.md
        
    - name: 📤 Upload Summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary-${{ github.run_number }}
        path: SUMMARY.md
        retention-days: 30
